// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  webstie String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations:
  posts Post[] //one-to-many
  comments Comment[] //one-to-many
  likes Like[] //one-to-many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users this user follows

  notificationsReceived Notification[] @relation("notificationsReceived") // notifications receied by user
  notificationsCreated Notification[] @relation("notificationCreated") // notification triggered by user
}

model Post {
  id String @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations:
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)  
  comments Comment[]
  likes Like[]
  notifications Notification[]
}

model Comment {
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())
  
  // Relations:
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) 
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@index([authorId, postId])
  notifications Notification[]
}

model Like {
  id String @id @default(cuid())
  userId String
  postId String
  createdAt DateTime @default(now())

  // Relations:
  author User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)  
  @@index([userId, postId])
  @@unique([userId, postId]) // prevents same user from liking post twice
}

model Follows {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations:
  follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade) 
  follwing User @relation("following", fields: [followingId], references: [id], onDelete: Cascade) 

  @@index([followerId, followingId])
  @@id([followerId,followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("notificationsReceived", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreated", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW 
}